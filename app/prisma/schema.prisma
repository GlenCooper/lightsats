// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fieldReference"]
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

// from https://next-auth.js.org/adapters/prisma
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// from https://next-auth.js.org/adapters/prisma
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// from https://next-auth.js.org/adapters/prisma
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id String @id @default(cuid())
  lnurlPublicKey String? @unique
  email String? @unique
  phoneNumber String? @unique
  name String?
  avatarURL String?
  twitterUsername String?
  lightningAddress String?
  tipsSent Tip[] @relation("tipsSent")
  tipsReceived Tip[] @relation("tipsReceived")
  tipGroups TipGroup[]
  lnbitsWallet LnbitsWallet?
  locale String @default("en")

  // from https://next-auth.js.org/adapters/prisma
  emailVerified DateTime?
  accounts Account[]
  sessions Session[]
  isAnonymous Boolean @default(false)
  withdrawalLinks WithdrawalLink[]
  withdrawalErrors WithdrawalError[]
  withdrawals Withdrawal[]
  journeyStep Int @default(1)
  inJourney Boolean @default(false)

  roles UserRole[]
  userType UserType @default(tipper)
  created DateTime @default(now())
  updated DateTime @default(now()) @updatedAt

  sentReminders SentReminder[]
  lastWithdrawal DateTime?
  notifications Notification[]
  achievements Achievement[]
  leaderboardsCreated Leaderboard[] @relation("leaderboardsCreated")
}

model TipGroup {
  id String @id @default(cuid())
  created DateTime @default(now())
  updated DateTime @updatedAt
  status TipGroupStatus
  tips Tip[]
  name String?
  quantity Int // how many tips
  tipperId String
  tipper User @relation(fields: [tipperId], references: [id])
  lnbitsWallet LnbitsWallet?
  invoice String?
  invoiceId String?
}

model Tip {
  id String @id @default(cuid())
  amount Int // in sats
  fee Int @default(0) // fees may change over time, so recorded in the tip. fees must be rounded up to a whole value (in sats).
  tipperId String
  tipper User @relation("tipsSent", fields: [tipperId], references: [id])
  tippeeId String?
  tippee User? @relation("tipsReceived", fields: [tippeeId], references: [id])
  tippeeName String? // set by tipper when creating tip - tippee does not have an account yet
  tippeeLocale String? // set by tipper when creating tip - tippee does not have an account yet
  invoice String?
  invoiceId String?
  preparationInvoice String? // payment from tip group wallet
  preparationInvoiceId String? // payment from tip group wallet
  lnbitsWallet LnbitsWallet?
  status TipStatus
  created DateTime @default(now())
  updated DateTime @updatedAt
  claimed DateTime?
  expiry DateTime
  currency String?
  note String? @db.VarChar(255)
  version Int @default(0)
  withdrawalLinkTip WithdrawalLinkTip[]
  withdrawalId String?
  withdrawal Withdrawal? @relation(fields: [withdrawalId], references: [id])
  claimLinkViewed Boolean @default(false)
  numSmsTokens Int @default(0) // to allow new user signups using SMS
  sentReminders SentReminder[]
  skipOnboarding Boolean @default(false)
  withdrawalLinks WithdrawalLink[]
  withdrawalErrors WithdrawalError[]
  lastWithdrawal DateTime?
  groupId String?
  group TipGroup? @relation(fields: [groupId], references: [id])
  groupTipIndex Int?
}

model LnbitsWallet {
  id String @id // id of the lnbits wallet (generated by lnbits)
  tip Tip? @relation(fields: [tipId], references: [id], onDelete: Cascade)
  tipId String? @unique
  tipGroup TipGroup? @relation(fields: [tipGroupId], references: [id], onDelete: Cascade)
  tipGroupId String? @unique
  user User? @relation(fields: [userId], references: [id])
  userId String? @unique // lightsats user ID, for user staging wallets
  lnbitsUserId String // id of the lnbits user (generated by lnbits)
  adminKey String // for creating/paying invoices ("X-Api-Key")
  created DateTime @default(now())
}

model LnurlAuthKey {
  k1 String @id
  key String?
  created DateTime @default(now())
  linkUserId String?
}

model WithdrawalLink {
  id String @id
  user User? @relation(fields: [userId], references: [id])
  userId String?
  tip Tip? @relation(fields: [tipId], references: [id])
  tipId String?

  withdrawalFlow WithdrawalFlow
  linkTips WithdrawalLinkTip[]
  used Boolean @default(false)
  created DateTime @default(now())
  updated DateTime @default(now()) @updatedAt
  amount Int
  fee Int
  lnurl String
}

model WithdrawalLinkTip {
  tip Tip @relation(fields: [tipId], references: [id])
  tipId String
  withdrawalLink WithdrawalLink @relation(fields: [withdrawalLinkId], references: [id], onDelete: Cascade)
  withdrawalLinkId String

  @@id([tipId, withdrawalLinkId])
}

model Withdrawal {
  id String @id @default(cuid())
  user User? @relation(fields: [userId], references: [id])
  userId String?
  tips Tip[]
  routingFee Int
  withdrawalInvoiceId String
  withdrawalInvoice String
  withdrawalFlow WithdrawalFlow
  withdrawalMethod WithdrawalMethod
  created DateTime @default(now())
}

model WithdrawalError {
  id String @id @default(cuid())
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?
  tip Tip? @relation(fields: [tipId], references: [id])
  tipId String?

  message String
  created DateTime @default(now())

  withdrawalFlow WithdrawalFlow?
  withdrawalMethod WithdrawalMethod?
  withdrawalInvoice String?
}

model UserRole {
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  roleType RoleType
  created DateTime @default(now())

  @@id([userId, roleType])
}

model SentReminder {
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  tip Tip @relation(fields: [tipId], references: [id], onDelete: Cascade)
  tipId String
  reminderType ReminderType
  delivered Boolean @default(false)
  created DateTime @default(now())
  updated DateTime @default(now()) @updatedAt

  @@id([userId, tipId, reminderType])
}

model Notification {
  id String @id @default(cuid())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  tipId String?
  achievementType AchievementType?
  type NotificationType
  created DateTime @default(now())
  updated DateTime @default(now()) @updatedAt
  read Boolean @default(false)
}

model Leaderboard {
  id String @id @default(cuid())
  title String
  global Boolean // if false, requires a join link. Joined users will be added as LeaderboardUsers (TODO)
  created DateTime @default(now())
  updated DateTime @default(now()) @updatedAt
  start DateTime
  end DateTime?
  creator User @relation("leaderboardsCreated", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String
  // TODO: password
  // TODO: goalAmount
  // TODO: theme/themeUrl/leaderboard customisation
}

//model LeaderboardUser {

//}

model Achievement {
  type AchievementType
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  created DateTime @default(now())
  updated DateTime @default(now()) @updatedAt

  @@id([userId, type])
}

enum AchievementType {
  SELF_CLAIMED
  // SELF_WITHDRAWN - more specific versions below (webln, manual, lnurl)
  BECAME_TIPPER
  LINKED_EMAIL
  LINKED_WALLET
  SET_NAME
  SET_AVATAR_URL
  SET_LIGHTNING_ADDRESS
  CREATED_TIP
  FUNDED_TIP
  TIP_CLAIMED
  TIP_WITHDRAWN
  // WEBLN_FUNDED - unable to easily tell
  WEBLN_WITHDRAWN
  MANUAL_WITHDRAWN
  LNURL_WITHDRAWN
  EARLY_SUPPORTER
  SENT_1K
  SENT_10K
  SENT_100K
  SENT_1M
  TOP_10
  TOP_3
  TOP_1
  MOST_WITHDRAWN_TIPS
  PWA
  TIPS_10
  TIPS_25
  TIPS_50
  TIPS_100
}

enum NotificationType {
  COMPLETE_PROFILE
  LINK_EMAIL
  TIP_CLAIMED
  TIP_WITHDRAWN
  ACHIEVEMENT_UNLOCKED
}

enum ReminderType {
  ONE_DAY_AFTER_CLAIM
  ONE_DAY_BEFORE_EXPIRY
}

enum TipGroupStatus {
  UNFUNDED
  FUNDED
}

enum TipStatus {
  UNFUNDED // tip created but tipper needs to pay invoice to fund the tip
  UNCLAIMED // tip funded but not yet claimed
  CLAIMED // tip claimed but not yet withdrawn
  WITHDRAWN // final status for successful tippee flow
  REFUNDED // final status for tipper refund (tippee did not withdraw)
  WITHDRAWING // currently unused
  WITHDRAWAL_FAILED // currently unused
  RECLAIMED // tipper reclaimed their tip but not yet withdrawn
  UNAVAILABLE // tip version is out of date - tip can no longer be claimed or withdrawn
}

enum WithdrawalFlow {
  tipper
  tippee
  anonymous
}

enum WithdrawalMethod {
  lnurlw
  invoice
  webln
}

enum RoleType {
  SUPERADMIN
}

enum UserType {
  tipper
  tippee
}